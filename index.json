[{"categories":["技术"],"content":"什么是GitHub Pages GitHub Pages是通过git仓库来管理个人或项目网站。 优势 文章不丢失 使用git（分布式代码管理工具）管理文章内容，能安全可靠的保存文章，以及所有的历史变更记录。 免维护工作和无成本 避免个人网站的各种维护工作和成本 成本：购买服务器/带宽/存储等费用 维护工作：https证书申请/轮换，网站安全，系统管理等等 自定义域名 很多blog服务也能保证文章丢失，也不需要维护工作和成本，但是很少支持使用自己的自定义域名。这个能让网站看起来是一个独立的个人网站，和Github完全无关。 劣势 不支持动态网站 如果只是用来写文章/记录各种心得，静态网站能完全满足需求。但是如果需要实验建站的各种前后端技术，就不太适合了。 ","date":"2022-10-25","objectID":"/githubpages/:0:1","tags":["建站"],"title":"使用GitHub免费搭建个人网站","uri":"/githubpages/"},{"categories":["技术"],"content":"如何使用GitHub Pages 关键步骤 注册github账号 创建git仓库 注意仓库名必须是username.github.io形式，username是GitHub的用户名 编辑内容 主页文件：index.html 先通过git clone代码仓库，然后创建/编辑文件，最后在提交代码成功时，会自动发布到网站 自定义域名 需要先在自己的域名提供商中配置： 增加解析 记录类型： CNAME 主机记录： @ （直接解析主域名，例如github.io） 记录值： username.github.io （username替换为GitHub的用户名） 如果需要解析例如www.github.io，则在增加一条解析，其他参数相同，主机记录设置为： www 即可。 详细文档以及GitHub本身的配置参考GitHub Pages配置文档 基本过程是在对应的git仓库中设置，链接：https://github.com/usename/usename.github.io/settings/pages（username替换为GitHub的用户名） 分支 默认是main 域名 填写自己的域名 HTTPS 勾选Enforce HTTPS，不能通过HTTP访问，强制设置为HTTPS访问。 ","date":"2022-10-25","objectID":"/githubpages/:0:2","tags":["建站"],"title":"使用GitHub免费搭建个人网站","uri":"/githubpages/"},{"categories":["技术"],"content":"静态网站工具 静态网站的工具非常多，例如GitHub官方支持的Jekyll，还有Hugo/Hexo/VuePress/Nuxt.js等。 每个工具的使用方法各有特色，但是基本原理都是有一个build步骤，把内容编译成html/js/css文件，并输出到一个public目录。然后把http服务的根目录设置为public目录即可访问。 ","date":"2022-10-25","objectID":"/githubpages/:0:3","tags":["建站"],"title":"使用GitHub免费搭建个人网站","uri":"/githubpages/"},{"categories":["技术"],"content":"静态网站工具如何结合GitHub Pages GitHub支持workflows的功能，能在提交代码后自动执行指定的任务。只要把任务配置为静态网站工具的build就能自动发布内容了。 以Hugo工具为例，详细参考Host on GitHub 设置任务 先在git仓库的根目录的.github/workflows新建gh-pages.yml文件，内容如下： name: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-22.04 steps: - uses: actions/checkout@v3 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: 'latest' extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == 'refs/heads/main' with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 修改GitHub Pages配置 上面设置的任务中，实际是把main分支的内容，经过Hogo的build，把public下所有内容重新提交到gh-pages分支根目录下。所以只要把GitHub Pages配置中的分支参数修改为： gh-pages，即可以实现提交代码自动发布到网站的功能。 ","date":"2022-10-25","objectID":"/githubpages/:0:4","tags":["建站"],"title":"使用GitHub免费搭建个人网站","uri":"/githubpages/"},{"categories":null,"content":"AFTERAIN ","date":"2022-09-29","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":["技术"],"content":"安装系统 下载 操作系统镜像 树莓派有很多发行版，官方支持的Raspberry Pi OS就有多个版本（桌面版本，桌面版本+推荐软件，精简版）可供选择。场景是用树莓派做服务器，不连接显示器/键盘/鼠标，所以选择的精简版。 下载安装程序Raspberry Pi Imager 安装程序运行在PC电脑上，支持在windows/Ubuntu/macOS多种操作系统下使用。 安装 Raspberry Pi Imager只要3步就能把操作系统写入SD卡：选择 操作系统镜像 -\u003e 选择 SD卡 -\u003e 写入 分区 安装程序在SD卡上创建了两个分区：boot(启动)分区和root(系统)根分区 boot包含了启动最关键的linux内核文件。分区是vfat格式。现在常用的PC操作系统windows/Linux/macOS都能直接访问（读写文件） root包含了除内核之外，操作系统的各种文件（二进制/配置等），分区是ext4格式。Linux各种发行版默认都支持ext4格式，但是大家常用的windows/macOS系统PC电脑是无法直接访问的（需要安装特殊软件才支持）。 所以安装完成后，如果把SD卡重新插入PC电脑，windows/macOS只能看到一个boot磁盘。 ","date":"2022-09-29","objectID":"/raspberrypi/:0:1","tags":["树莓派"],"title":"安装配置RaspberryPi","uri":"/raspberrypi/"},{"categories":["技术"],"content":"无显示器启动时的配置机制 其实在安装系统完成后，只需要把SD卡插入树莓派中，接通电源即可启动系统使用了。不过由于不接显示器/键盘/鼠标，所以需要在启动前先配置好网络和SSH服务（远程登录控制），否则无法使用。 由于大家常用的windows/macOS系统PC电脑无法直接访问root分区，也就无法修改配置文件。这时树莓派提供了一个有趣的方案，只要在boot分区按照规范的文件名和格式创建好相关配置，就会在启动时自动加载。具体支持哪些，参考官方配置文档。 后面的wifi配置和SSH服务都使用了这个机制。 ","date":"2022-09-29","objectID":"/raspberrypi/:0:2","tags":["树莓派"],"title":"安装配置RaspberryPi","uri":"/raspberrypi/"},{"categories":["技术"],"content":"配置wifi网络 配置文件 在boot磁盘的根目录创建文件wpa_supplicant.conf ,内容如下： country=CN ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"xxx\" psk=\"yyy\" key_mgmt=WPA-PSK priority=1 } 根据实际情况修改ssid（wifi网络名）和psk（wifi密码）两个参数即可。其实key_mgmt也需要根据实际情况修改，不过考虑安全性，家庭wifi一般都推荐使用WPA-PSK。 如何获取IP地址 启动树莓派后，登录路由器，查看客户端名称是raspberrypi的IP地址即可。 最好使用路由器提供的“手工指定IP地址”的方法，给树莓派一个固定的IP。一般需要先在路由器查询已DHCP分配的客户端列表，找到raspberrypi对应的MAC地址，然后进行设置。 这样树莓派就可以作为固定IP地址的服务器使用了。 ","date":"2022-09-29","objectID":"/raspberrypi/:0:3","tags":["树莓派"],"title":"安装配置RaspberryPi","uri":"/raspberrypi/"},{"categories":["技术"],"content":"配置SSH服务 在boot磁盘的根目录创建文件ssh或ssh.txt，文件内容为空即可。这样树莓派启动时会开启SSH服务，默认的账号是pi，密码是raspberry。 ","date":"2022-09-29","objectID":"/raspberrypi/:0:4","tags":["树莓派"],"title":"安装配置RaspberryPi","uri":"/raspberrypi/"},{"categories":["技术"],"content":"更改apt源 SSHssh pi@xxx.xxx.xxx.xxx登录树莓派，输入默认密码raspberry 修改文件etc/apt/sources.list（改为清华提供的源），内容如下： deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib 执行apt-get update更新源信息 ","date":"2022-09-29","objectID":"/raspberrypi/:0:5","tags":["树莓派"],"title":"安装配置RaspberryPi","uri":"/raspberrypi/"}]